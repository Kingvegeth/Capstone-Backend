spring.application.name=capstone

spring.datasource.url=${PG_URL}
spring.datasource.username=${PG_USERNAME}
spring.datasource.password=${PG_PASSWORD}
#spring.datasource.url=jdbc:postgresql://ep-noisy-firefly-a2ds0r87.eu-central-1.pg.koyeb.app/koyebdb?user=koyeb-adm&password=K8ZLRWOgiI1P
#spring.datasource.url=jdbc:postgresql://localhost:5432/cinema3
#spring.datasource.username=postgres
#spring.datasource.password=${spring.datasource.password}
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=false
spring.jpa.properties.hibernate.format_sql=true
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
#Questa chiave serve a firmare il token e di conseguenza a validare il token tramite essa
jwt.key=${JWT_KEY}
#questi sono i ms dopo i quali il token scade
jwt.expirationMs=864000000

gmail.mail.transport.protocol=smtp
gmail.mail.smtp.auth=true
gmail.mail.smtp.starttls.enable=true
gmail.mail.debug=true
gmail.mail.from=${gmail.mail.from}
gmail.mail.from.password=${gmail.mail.from.password}
gmail.smtp.ssl.enable=false
gmail.smtp.host=smtp.gmail.com
gmail.smtp.port=587

CLOUDINARY_URL=${CLOUDINARY_URL}

# File Dimension configuration
# max total dimension of the file
spring.servlet.multipart.max-file-size=10MB
# max total dimension of the request
spring.servlet.multipart.max-request-size=10MB


default.avatar.url=https://i.postimg.cc/fk49ZKjR/default-user.png

spring.config.import=otional:file:env.properties
